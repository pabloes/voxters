/*! "src/game.ts" 6bbf565692b4bf47848300bfea50ce2d3b73fb1a191abb2c15e41c772dcb5c69 */ eval("var __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\ndefine(\"common/voxter/eyes\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.createEyes = void 0;\r\n    var colors = [\r\n        \"#ff0000\",\r\n        \"#ff00ff\",\r\n        \"#ffff00\",\r\n        \"#ffffff\",\r\n        \"#00ff00\",\r\n        \"#00ffff\",\r\n        \"#0000ff\",\r\n    ];\r\n    var emissiveByColor = [\r\n        8,\r\n        6,\r\n        4,\r\n        4,\r\n        4,\r\n        4,\r\n        10\r\n    ];\r\n    var createEyes = function (boxter, variationIndex, color, texture) {\r\n        var eyes = new Entity();\r\n        eyes.setParent(boxter);\r\n        var mat = new Material();\r\n        var eyeShape = new PlaneShape();\r\n        eyeShape.withCollisions = false;\r\n        eyeShape.uvs = getUvs(variationIndex + 1);\r\n        eyes.addComponent(eyeShape);\r\n        eyes.addComponent(new Transform({\r\n            position: new Vector3(0, 1 / 3 - 0.025, -0.5001),\r\n            scale: new Vector3(1 - 0.05, 1 / 3, 1)\r\n        }));\r\n        // mat.albedoColor= Color3.FromHexString(color);\r\n        mat.emissiveColor = Color3.FromHexString(color);\r\n        mat.emissiveIntensity = emissiveByColor[colors.indexOf(color)];\r\n        mat.albedoTexture = texture;\r\n        mat.alphaTexture = texture;\r\n        eyes.addComponent(mat);\r\n        return {\r\n            applyIndex: applyIndex,\r\n            applyColor: function (color) {\r\n                //  mat.albedoColor= Color3.FromHexString(color);\r\n                mat.emissiveColor = Color3.FromHexString(color);\r\n                mat.emissiveIntensity = emissiveByColor[colors.indexOf(color)];\r\n            }\r\n        };\r\n        function applyIndex(variationIndex) {\r\n            eyeShape.uvs = getUvs(variationIndex + 1);\r\n        }\r\n        function getUvs(variationIndex) {\r\n            var spriteCols = 8; // number of columns\r\n            var spriteRows = 8; // number of rows\r\n            var currentSpriteCell = variationIndex; // starting position\r\n            // Calculated variables\r\n            var h2Fac = 178 / 256;\r\n            var h1Fac = 32 / 256;\r\n            var spriteCels = spriteCols * spriteRows;\r\n            var colFactor = 1 / spriteCols;\r\n            var rowFactor = 1 / spriteRows;\r\n            var currRowStart = spriteRows - Math.floor((currentSpriteCell - 1) / spriteCols) - h1Fac;\r\n            var currColStart = ((currentSpriteCell - 1) % spriteCols);\r\n            var A = (currColStart) * (colFactor);\r\n            var B = (currColStart + 1) * (colFactor);\r\n            var C = (currRowStart - 1) * (rowFactor) + h2Fac * rowFactor;\r\n            var D = (currRowStart) * (rowFactor);\r\n            return [\r\n                0, 0, 0, 0, 0, 0, 0, 0,\r\n                B,\r\n                C,\r\n                A,\r\n                C,\r\n                A,\r\n                D,\r\n                B,\r\n                D, //d\r\n            ];\r\n        }\r\n    };\r\n    exports.createEyes = createEyes;\r\n});\r\ndefine(\"common/voxter/mouth\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.createMouth = void 0;\r\n    var createMouth = function (boxter, variationIndex, color, texture) {\r\n        var eyes = new Entity();\r\n        eyes.setParent(boxter);\r\n        var mat = new Material();\r\n        var eyeShape = new PlaneShape();\r\n        eyeShape.withCollisions = false;\r\n        eyeShape.uvs = getUvs(variationIndex + 1);\r\n        eyes.addComponent(eyeShape);\r\n        var EYE_HEIGHT = 78 / 256;\r\n        var MOUTH_HEIGHT = 114 / 256;\r\n        var EYEBROWN_HEIGHT = 32 / 256;\r\n        var NECK_HEIGHT = 32 / 256;\r\n        eyes.addComponent(new Transform({\r\n            position: new Vector3(0, -((1 / 3) / 2), -0.5001),\r\n            scale: new Vector3(1 - 0.05, 2 / 3 - 0.05, 1)\r\n        }));\r\n        // mat.albedoColor = Color3.Yellow();\r\n        mat.specularIntensity = 0;\r\n        mat.roughness = 1;\r\n        mat.albedoTexture = texture;\r\n        mat.alphaTexture = texture;\r\n        mat.emissiveTexture = texture;\r\n        mat.emissiveIntensity = 1.2;\r\n        mat.emissiveColor = new Color3(1, 1, 1);\r\n        eyes.addComponent(mat);\r\n        return {\r\n            applyIndex: function (variationIndex) {\r\n                eyeShape.uvs = getUvs(variationIndex + 1);\r\n            }\r\n        };\r\n        function getUvs(variationIndex) {\r\n            var spriteCols = 8; // number of columns\r\n            var spriteRows = 8; // number of rows\r\n            var currentSpriteCell = variationIndex; // starting position\r\n            // Calculated variables\r\n            var h2Fac = 63 / 128;\r\n            var h1Fac = 55 / 128;\r\n            var spriteCels = spriteCols * spriteRows;\r\n            var colFactor = 1 / spriteCols;\r\n            var rowFactor = 1 / spriteRows;\r\n            var currRowStart = spriteRows - Math.floor((currentSpriteCell - 1) / spriteCols) - h1Fac;\r\n            var currColStart = ((currentSpriteCell - 1) % spriteCols);\r\n            var A = (currColStart) * (colFactor);\r\n            var B = (currColStart + 1) * (colFactor);\r\n            var C = (currRowStart - 1) * (rowFactor) + h2Fac * rowFactor;\r\n            var D = (currRowStart) * (rowFactor);\r\n            return [\r\n                0, 0, 0, 0, 0, 0, 0, 0,\r\n                B,\r\n                C,\r\n                A,\r\n                C,\r\n                A,\r\n                D,\r\n                B,\r\n                D, //d\r\n            ];\r\n        }\r\n    };\r\n    exports.createMouth = createMouth;\r\n});\r\ndefine(\"common/voxter/head\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.createHead = void 0;\r\n    var createHead = function (boxter, index) {\r\n        var shape = index && new GLTFShape(\"models/accesories/acc\" + index + \".glb\");\r\n        var head = new Entity();\r\n        head.addComponent(new Transform({ position: new Vector3(0, 0, 0) }));\r\n        if (index)\r\n            head.addComponent(shape);\r\n        head.setParent(boxter);\r\n        return {\r\n            applyIndex: function (index) {\r\n                console.log(\"head ondex\", index);\r\n                var shape = new GLTFShape(\"models/accesories/acc\" + index + \".glb\");\r\n                head.addComponentOrReplace(shape);\r\n            }\r\n        };\r\n    };\r\n    exports.createHead = createHead;\r\n});\r\ndefine(\"common/lib/decoder\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.getEncoder = exports.encode = exports.getDna = exports.maximumNumber = exports.decode = exports.COLOR = exports.properties = exports.propertySizes = void 0;\r\n    exports.propertySizes = [64, 64, 7, 9];\r\n    exports.properties = [\r\n        \"eye\", \"mouth\", \"eye_color\", \"head\"\r\n    ];\r\n    var COLOR;\r\n    (function (COLOR) {\r\n        COLOR[COLOR[\"RED\"] = 0] = \"RED\";\r\n        COLOR[COLOR[\"PINK\"] = 1] = \"PINK\";\r\n        COLOR[COLOR[\"YELLOW\"] = 2] = \"YELLOW\";\r\n        COLOR[COLOR[\"WHITE\"] = 3] = \"WHITE\";\r\n        COLOR[COLOR[\"GREEN\"] = 4] = \"GREEN\";\r\n        COLOR[COLOR[\"TURQUOISE\"] = 5] = \"TURQUOISE\";\r\n        COLOR[COLOR[\"BLUE\"] = 6] = \"BLUE\";\r\n    })(COLOR = exports.COLOR || (exports.COLOR = {}));\r\n    ;\r\n    function decode(dna, propertySizes) {\r\n        var results = [];\r\n        var i = 0;\r\n        var factor = 1;\r\n        while (i < propertySizes.length) {\r\n            results.push(Math.floor(dna / factor) % propertySizes[i]);\r\n            factor = factor * propertySizes[i];\r\n            i++;\r\n        }\r\n        return results;\r\n    }\r\n    exports.decode = decode;\r\n    function maximumNumber(propertySizes) {\r\n        var i = 0;\r\n        var factor = 1;\r\n        while (i < propertySizes.length) {\r\n            factor *= propertySizes[i];\r\n            i++;\r\n        }\r\n        return factor - 1;\r\n    }\r\n    exports.maximumNumber = maximumNumber;\r\n    function getDna(_a) {\r\n        var eyeIndex = _a.eyeIndex, mouthIndex = _a.mouthIndex, eyeColorIndex = _a.eyeColorIndex, headIndex = _a.headIndex;\r\n        return encode(exports.propertySizes, [eyeIndex, mouthIndex, eyeColorIndex, headIndex]);\r\n    }\r\n    exports.getDna = getDna;\r\n    function encode(propertySizes, propertyValues) {\r\n        var i = 0;\r\n        var dna = 0;\r\n        var factor = 1;\r\n        while (i < propertySizes.length) {\r\n            dna = dna + (propertyValues[i] * factor);\r\n            factor *= propertySizes[i];\r\n            i++;\r\n        }\r\n        return dna;\r\n    }\r\n    exports.encode = encode;\r\n    function getEncoder(properties, propertySizes) {\r\n        return function (dna) {\r\n            var decoded = decode(dna, propertySizes);\r\n            return properties.reduce(function (acc, current, index) {\r\n                acc[current] = decoded[index];\r\n                return acc;\r\n            }, {});\r\n        };\r\n    }\r\n    exports.getEncoder = getEncoder;\r\n});\r\n//TODO add metadata\r\ndefine(\"common/voxter/voxter\", [\"require\", \"exports\", \"common/voxter/eyes\", \"common/voxter/mouth\", \"common/voxter/head\", \"common/lib/decoder\"], function (require, exports, eyes_1, mouth_1, head_1, decoder_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.createVoxter = void 0;\r\n    var colors = [\r\n        \"#ff0000\",\r\n        \"#ff00ff\",\r\n        \"#ffff00\",\r\n        \"#ffffff\",\r\n        \"#00ff00\",\r\n        \"#00ffff\",\r\n        \"#0000ff\",\r\n    ];\r\n    var texture = new Texture(\"images/sprites2048.png\", { samplingMode: 1, hasAlpha: true });\r\n    var createVoxter = function (_a) {\r\n        var position = _a.position, dna = _a.dna, rotation = _a.rotation;\r\n        var _b = __read(decoder_1.decode(dna, decoder_1.propertySizes), 4), eyeIndex = _b[0], mouthIndex = _b[1], eyeColorIndex = _b[2], headIndex = _b[3];\r\n        var eyeColor = colors[eyeColorIndex];\r\n        var entity = new Entity();\r\n        var skin = new Material();\r\n        skin.albedoColor = new Color3(0, 0, 0);\r\n        var boxterShape = new BoxShape();\r\n        entity.addComponent(boxterShape);\r\n        entity.addComponent(skin);\r\n        var boxterTransform = new Transform({\r\n            position: position,\r\n            scale: new Vector3(1, 1, 1),\r\n            rotation: rotation || Quaternion.Zero()\r\n        });\r\n        entity.addComponent(boxterTransform);\r\n        var eyes = eyes_1.createEyes(entity, eyeIndex, eyeColor, texture);\r\n        var mouth = mouth_1.createMouth(entity, mouthIndex, \"#ff00ff\", texture);\r\n        var head = head_1.createHead(entity, headIndex);\r\n        return {\r\n            applyDna: function (dna) {\r\n                var _a = __read(decoder_1.decode(dna, decoder_1.propertySizes), 4), eyeIndex = _a[0], mouthIndex = _a[1], colorIndex = _a[2], headIndex = _a[3];\r\n                eyes.applyIndex(eyeIndex);\r\n                eyes.applyColor(colors[colorIndex]);\r\n                mouth.applyIndex(mouthIndex);\r\n                head.applyIndex(headIndex);\r\n            },\r\n            getEntity: function () { return entity; },\r\n            setParent: function (parent) { return entity.setParent(parent); }\r\n        };\r\n    };\r\n    exports.createVoxter = createVoxter;\r\n});\r\ndefine(\"SDK-simple/src/game\", [\"require\", \"exports\", \"common/voxter/voxter\"], function (require, exports, voxter_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var root = new Entity();\r\n    engine.addEntity(root);\r\n    var voxter = voxter_1.createVoxter({\r\n        position: new Vector3(8, 1, 8),\r\n        rotation: Quaternion.Zero(),\r\n        dna: 0\r\n    });\r\n    voxter.applyDna(1);\r\n    voxter.setParent(root);\r\n});\r\n//# sourceMappingURL=data:application/json;base64,\n//# sourceURL=dcl://src/game.ts")